writing your first django app, part 1
-------------------------------------

1.see the django version:
	python -c "import django;  print(django.get_version())"
2.create a project:
	django-admin.py startproject websiteName
	manage.py : A command-line utility that letss you interact with this DJango project
	settings.py : settings for this project
	urls.py : URL declartions for this project
	wsgi.py : An entry point for wsgi-compatible web servers to server this project
3.database setup:
	create role xxxx createdb login password '123456'
	drop role if exists xxxx
	settings.py:
		'ENGINE':'django.db.backends.postgresql_psycopg2'
		'NAME':'DBName'
		'USER'
		'PASSWORD'
		'HOST'
		'PORT'
	python manage.py migrate
4.the development server
	python manage.py runserver 0.0.0.0:8080
	
	Don't use this server in anything resembling a production environment!!
	automatic reload when code changes.
5.creating models
	--5.1 Each application you write consists of a Python package.
	--5.2 What is the difference between a project and an app??
		An app is a web application that does something.
		A project is a collection of configuration and apps for a particular web site. 
		A project can contain multiple apps.An app can be in multiple apps.
	--5.3 python manager.py startapp polls
	--5.4 The first step in writing a database web app in Django is to define my models with additional metadata.
		--5.4.1 What is a model???
			A model is the single, definitive source of data about my data. It contains the essential fields and behaviors of the data you're storing.
		--5.4.2 create two models : Question(question, publication date) & Choice(text, vote, associated with Question).

6. activating models
	--6.1 with models.py, Django can do :
		create a database schema for this app
		create a Python database-access API for accessing Question and Choice objects
	--6.2 Tell Django the "polls" app is installed.(setting.py, INSTALL_APPS) Django apps are pluggable, they don't have to be tied to a given Django installation.
	--6.3 python manage.py makemigrations polls. Migrations are how Django stores changes to your models(db schema)--they are files on disk.
	--6.4 python manage.py sqlmigrate polls 0001 (sqlmigrate takes migration names and returns their SQL.)(before this ,can run 'python manage.py check')

7. Playing with the API
	--7.1 python manage.py shell 
		(
			manage.py sets DJANGO_SETTINGS_MODULE
			os.environ : a mapping object representing the string environment
		)
		(
			from django.utils import timezone
			q = Question(questionText = 'this is my first question', pub_date = timezone.now());
			q.save()
			Question.objects.filter(id=1)
			Question.obejcts.filter(questionText__startswith='this')
			Question.objects.get(pub_date__year=timezone.now().year)
			q = Question.objects.get(pk=1)(primary key)
			q.choice_set.create(choiceText = 'do you believe,yes?', votes=0)
			q.choice_set.create(choiceText = 'no,no', votes=0)
			c = q.choice_set.create(choiceText = 'don't know', votes=0)
			c.question
			q.choice_set.all()
			Choice.objects.filter(question__pub_date__year = timezone.now().year)
			c = q.choice_set.filter(choiceText__startswith='don')
			c.delete()
		)
	--7.2 add __str__() method to models(my own sanity, objects' representations are used throughout Django's automatically-generated admin)
		(
			Python 3, __str__()
			Python 2, define __unicode__() method returning unicode values instead
		)


writing my first Django APP, part 2
-----------------------------------

1.creating an admin user
	--1.1 python manage.py createsuperuser

2.start the development server, and turn to admin site
	--2.1 http://ip-address:8080

3.Enter the admin site
	--3.1 Groups and Users are provided by django.contrib.auth

4.Make the poll APP editable in admin site
	--4.1 /polls/admin.py
		from django.contrib import admin
		from polls.models import Question
		admin.site.register(Question)

5.Explore the free admin functionality
	--5.1 The form is automatically generated from the Question model
	--5.2 Different model field types correspond to the appropriate HTML input widget.
	--5.3 Each DateTimeField gets javascript shortcuts

6.Customize the admin form
	--6.1 re-oredering the items on Question edit form
		class QuestionAdmin(admin.ModelAdmin):
			fields = ['pub_date', 'questionText']
		admin.site.register(Question, QuestionAdmin)
	--6.2 Split the form up into fields
		fieldsets = [
			('111', {'fields':['pub_date']}),
		]
	--6.3 assign HTML classes to each fieldset
		fieldsets=[('111'), {'fields':['pub_date'], 'class':['collapse']}]


create git repository and upload to github
------------------------------------------
(reference:http://sirupsen.com/starting-with-git/)
1.create ssh key, provide ssh key to git, introduce ourselves to git(https://help.github.com/articles/generating-ssh-keys/#platform-linux)
	ls -al ~/.ssh
	ssh-keygen -t rsa -C "mostevercxz@gmail.com"
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa
	vim ~/.ssh/id_rsa.pub
	(copy the content to github page, settings, ssh keys, add ssh key)
	ssh -T git@github.com
2.create git repository
	git init
	git add .
	git commit . -m"first app"
	(git log, git status, clone)
	git remote add origin git@github.com:mostevercxz/writingFirstDjango.git(must use the word "origin"!! not "firstDjangoApp")
	git push -u origin master 
3. cancel last commit
	git reset --soft HEAD~1
	eidt
	git add ....
	git commit -c ORIG_HEAD
