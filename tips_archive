writing your first django app, part 1
-------------------------------------

1.see the django version:
	python -c "import django;  print(django.get_version())"
2.create a project:
	django-admin.py startproject websiteName
	manage.py : A command-line utility that letss you interact with this DJango project
	settings.py : settings for this project
	urls.py : URL declartions for this project
	wsgi.py : An entry point for wsgi-compatible web servers to server this project
3.database setup:
	create role xxxx createdb login password '123456'
	drop role if exists xxxx
	settings.py:
		'ENGINE':'django.db.backends.postgresql_psycopg2'
		'NAME':'DBName'
		'USER'
		'PASSWORD'
		'HOST'
		'PORT'
	python manage.py migrate
4.the development server
	python manage.py runserver 0.0.0.0:8080
	
	Don't use this server in anything resembling a production environment!!
	automatic reload when code changes.
5.creating models
	--5.1 Each application you write consists of a Python package.
	--5.2 What is the difference between a project and an app??
		An app is a web application that does something.
		A project is a collection of configuration and apps for a particular web site. 
		A project can contain multiple apps.An app can be in multiple apps.
	--5.3 python manager.py startapp polls
	--5.4 The first step in writing a database web app in Django is to define my models with additional metadata.
		--5.4.1 What is a model???
			A model is the single, definitive source of data about my data. It contains the essential fields and behaviors of the data you're storing.
		--5.4.2 create two models : Question(question, publication date) & Choice(text, vote, associated with Question).

6. activating models
	--6.1 with models.py, Django can do :
		create a database schema for this app
		create a Python database-access API for accessing Question and Choice objects
	--6.2 Tell Django the "polls" app is installed.(setting.py, INSTALL_APPS) Django apps are pluggable, they don't have to be tied to a given Django installation.
	--6.3 python manage.py makemigrations polls. Migrations are how Django stores changes to your models(db schema)--they are files on disk.
	--6.4 python manage.py sqlmigrate polls 0001 (sqlmigrate takes migration names and returns their SQL.)(before this ,can run 'python manage.py check')

7. Playing with the API
	--7.1 python manage.py shell 
		(
			manage.py sets DJANGO_SETTINGS_MODULE
			os.environ : a mapping object representing the string environment
		)
		(
			from django.utils import timezone
			q = Question(questionText = 'this is my first question', pub_date = timezone.now());
			q.save()
			Question.objects.filter(id=1)
			Question.obejcts.filter(questionText__startswith='this')
			Question.objects.get(pub_date__year=timezone.now().year)
			q = Question.objects.get(pk=1)(primary key)
			q.choice_set.create(choiceText = 'do you believe,yes?', votes=0)
			q.choice_set.create(choiceText = 'no,no', votes=0)
			c = q.choice_set.create(choiceText = 'don't know', votes=0)
			c.question
			q.choice_set.all()
			Choice.objects.filter(question__pub_date__year = timezone.now().year)
			c = q.choice_set.filter(choiceText__startswith='don')
			c.delete()
		)
	--7.2 add __str__() method to models(my own sanity, objects' representations are used throughout Django's automatically-generated admin)
		(
			Python 3, __str__()
			Python 2, define __unicode__() method returning unicode values instead
		)


writing my first Django APP, part 2
-----------------------------------

1.creating an admin user
	--1.1 python manage.py createsuperuser

2.start the development server, and turn to admin site
	--2.1 http://ip-address:8080

3.Enter the admin site
	--3.1 Groups and Users are provided by django.contrib.auth

4.Make the poll APP editable in admin site
	--4.1 /polls/admin.py
		from django.contrib import admin
		from polls.models import Question
		admin.site.register(Question)

5.Explore the free admin functionality
	--5.1 The form is automatically generated from the Question model
	--5.2 Different model field types correspond to the appropriate HTML input widget.
	--5.3 Each DateTimeField gets javascript shortcuts

6.Customize the admin form
	--6.1 re-oredering the items on Question edit form
		class QuestionAdmin(admin.ModelAdmin):
			fields = ['pub_date', 'questionText']
		admin.site.register(Question, QuestionAdmin)
	--6.2 Split the form up into fields
		fieldsets = [
			('111', {'fields':['pub_date']}),
		]
	--6.3 assign HTML classes to each fieldset
		fieldsets=[('111'), {'fields':['pub_date'], 'classes':['collapse']}]

7.Adding related objects
	--7.1 Django knows ForeignKey should be represented in the admin site as a <select> box
	--7.2 Every object with a ForeignKey relationship to another gets "Add another" link.
	--7.3 How to add a bunch of Choices directly when you create the Question object???
		class ChoiceInline(admin.StackedInline):
			model = Choice
			extra = 3
		class QA(admin.ModelAdmin):
			fieldsets=...
			inlines=[ChoiceInline]

8.Customize the admin change list
	--8.1 BY default, Django displays the str() of each object
	--8.2 list_display = ('questionText','pub_date')
	--8.3 change the column header, adn the string representation:
		( Mind the indentation!!!!)
		def was_published_recently(self):
			return balabala...
		was_published_recently.admin_order_field = 'pub_date'

9.Cosutomize the admin look and feel(introducing the template system of Django)
	--9.1 customizing my project's templates
		(
			--9.1.1 Create a templates directory, edit myWebsite/settings.py
				TEMPLATE_DIRS = [os.path.join(BASE_DIR, 'templates')]
			--9.1.2 cd templates; mkdir admin
			--9.1.3 cp xxx/django/contrib/admin/templates/admin/base_site.html BASE_DIR/templates/admin/base_site.html
			--9.1.4 edit base_site.html,  replace {{ site_header|default:_('Django administration') }} (including the curly braces) with whatever name I want
		)
		I can use (New in Django 1.7) AdminSite.site_header to do the same thing as above.
		(
			edit polls/admin.py, admin.site.site_header = 'go fuck!'
			but,, precedure, site_header < base_site.html
		)
	--9.2 where are the Django source files??
		python -c "import sys; sys.path = sys.path[1:]; import django;print(django.__path__)"
	--9.3 Customizing my application's templates
		How django find the template files???
		1. filesystem.loader, Loads templates from the filesystem, according to TEMPLATE_DIRS
		2. app_directories.Loader, Loads templates from Django apps on the filesystem. For each app in INSTALL_APPS, the loader looks for a template subdirectory.(The order of INSTALLED_APPS is significant! It will use the one it first finds. This explains why 'go fuck' appears after deleting 'my first django')


Writing my first Django app, part 3(creating views and template language)
-----------------------------------

1. A view is a "type" of Webpage in Django applications that serves a specific function and has a specific template.
	--1.1 In this poll application, there are four views:
		Question 'index', 'detail', 'results', vote action page
	--1.2 Each view is represented by a simple Python function(method). Web pages and other contents are delieved by views.
	--1.3 TO get from URLs to views, Django uses 'URLconfs'. A URLconf maps URL patterns to views.

2. Write first view.
	--2.1 edit polls/views.py
	(
		from django.http import HttpResponse
        def index(abc):
            return HttpResponse("this is my first view!")
	)
	--2.2 The url function
	(
		url(regex, view, kwargs = None, name=None, prefix='')
		url(r'^blog/(?P<year>\d{4})/$', views.year_archive, {'foo':'bar'})
	)
	--2.3 The url function arguments
	(
		regex : Django starts at the first regular expression and makes its way down the list, comparing the requested URL against each regex until it finds one that match. These regexes do not search GET and POST parameters, or the domain name. Theses regexes are compiled the first time the URLconf module is loaded.
		view : an HttpRequest object as first argument, any "captured" values from the regex as other arguments. (don't understand, an example ??)
		kwargs : arbitrary arguments can be passed to the target view
		name : naming my URL
	)

3. Writing more views
	--3.1 Edit polls/views.py & polls/urls.py(referenced by name regex, views with arguments)

4. Write views that actually do something
	--4.1 All Django wants is HttpResponse.
	--4.2 Why use get_obj_or_404() other than try, catch??
		Because that would couple the model layer to the view layer

5. Use the template system
	--5.1 The template sys uses dot-syntax to access variable attributes.

6. Removing hard-coded URLs in templates
	{% url %} template tag
	url(r'^(?P<qID>\d+)/$', views.detail, name = 'detail')
	{% url 'detail' %}(polls/123)
	url(r'^specifics/(?P<qID>\d+)/$', views.detail, name = 'detail')

7. Namespacing URL names
	url(r'^polls/', include('polls.urls', namespace="polls"))
	{% url 'polls:detail' %}


Writing my first Django app, part 4
-----------------------------------

1. Write a simple form
	--1.1 edit polls/detail.html

2. Use generic views
	--2.1 BY default, the DetailView generic view uses a template called <app_name>/<model_name>_detail.html. Use template_name to specific the template name.
	--2.2 For DetailView, knowing model Question, the automatically generated context variable is questoin; while for LIstView, the variable is question_list.
	
	
Writing my first Django app, part 5(writing testing)
-----------------------------------

1. Automated tests , the testing work is done for you by system.
	--1.1 Why create tests??
		Test will save you time checking 'it still seems to work'
		Test don't just identify problems, they prevent them
		Tests make your code more attractive
		Tests help teams work together

2. Basic testing strategies
	--2.1 create a method is polls/tests.py, begin with test_was_published_recently_with_future_question

3. Test a view
	--3.1 The Django test client, simulate a user interacting with the code at the view level

create git repository and upload to github
------------------------------------------
(reference:http://sirupsen.com/starting-with-git/)
1.create ssh key, provide ssh key to git, introduce ourselves to git(https://help.github.com/articles/generating-ssh-keys/#platform-linux)
	ls -al ~/.ssh
	ssh-keygen -t rsa -C "mostevercxz@gmail.com"
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa
	vim ~/.ssh/id_rsa.pub
	(copy the content to github page, settings, ssh keys, add ssh key)
	ssh -T git@github.com
2.create git repository
	git init
	git add .
	git commit . -m"first app"
	(git log, git status, clone)
	git remote add origin git@github.com:mostevercxz/writingFirstDjango.git(must use the word "origin"!! not "firstDjangoApp")
	git push -u origin master 
3. cancel last commit
	git reset --soft HEAD~1
	eidt
	git add ....
	git commit -c ORIG_HEAD
	(use git commit -a -m"revision:10 balabala", if you use <git commit . -m"bala">, it will not commit the parent directory!! Fuck!!!)
4.conflicts when using git



git Howtos, 2014-11-03
----------------
1.How to checkout the first commit??
	git log --oneline(list all commit logs, just pick the last commit)
	git checkout 47abcdef
2.How to return to a branch??
	git checkout master
3.How to count the number of commits??
	git rev-list HEAD --count
4.How to list all branches??
	git branch -l
5.How to create a new branch??
	git branch bugfixes141103
	git checkout bugfixes141103
	git commit -a
	git checkout master
	git merge bugfixes141103
